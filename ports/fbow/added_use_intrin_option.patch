diff --git a/CMakeLists.txt b/CMakeLists.txt
index 26f353c..e8f9eb9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -44,6 +44,7 @@ OPTION(BUILD_UTILS	"Set to OFF to not build utils" ON)
 OPTION(BUILD_SHARED_LIBS 	"Set to OFF to build static libraries" ON)
 OPTION(USE_CONTRIB "Set on/off" OFF)
 
+OPTION(USE_INTRIN "Set on/off" ON)
 OPTION(USE_AVX "Set on/off" ON)
 OPTION(USE_SSE3 "Set on/off" ON)
 
@@ -196,6 +197,10 @@ IF(CMAKE_COMPILER_IS_GNUCXX OR MINGW)
      add_definitions(-DUSE_AVX)
     endif()
 
+    IF(USE_INTRIN)
+      add_definitions(-DUSE_INTRIN)
+    endif()
+
  if(ENABLE_PROFILING)
         set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -pg -g")
     else()
diff --git a/src/cpu.h b/src/cpu.h
index 7dcb7e3..285f39d 100644
--- a/src/cpu.h
+++ b/src/cpu.h
@@ -4,9 +4,14 @@
 #include <cstdint>
 #include <cstring>
 #include <string>
+
 #ifdef __ANDROID__
+#ifdef USE_INTRIN
+#undef USE_INTRIN
+#endif
+#endif
 
-#else
+#ifdef USE_INTRIN
 #if defined(__x86_64__) || defined(_M_X64) || defined(__i386) || defined(_M_IX86)
 #   if _WIN32
 #include <Windows.h>
@@ -48,7 +53,7 @@ private:
     static bool inline detect_OS_AVX512();
     static inline uint64_t xgetbv(unsigned int x);
 };
-#ifdef __ANDROID__
+#ifndef USE_INTRIN
 
 void cpu::cpuid(int32_t out[4], int32_t x){}
 #else
@@ -91,7 +96,7 @@ bool  cpu::detect_OS_x64(){ return true;}
 ////////////////////////////////////////////////////////////////////////////////
 bool cpu::detect_OS_AVX(){
     //  Copied from: http://stackoverflow.com/a/22521619/922184
-#ifndef __ANDROID__
+#ifdef USE_INTRIN
 
     bool avxSupported = false;
     int cpuInfo[4]; cpuid(cpuInfo, 1);
@@ -105,7 +110,7 @@ bool cpu::detect_OS_AVX(){
 }
 bool cpu::detect_OS_AVX512(){
 
-#ifndef __ANDROID__
+#ifdef USE_INTRIN
     if (!detect_OS_AVX())
         return false;
     uint64_t xcrFeatureMask = xgetbv(_XCR_XFEATURE_ENABLED_MASK);
@@ -118,7 +123,7 @@ bool cpu::detect_OS_AVX512(){
 std::string cpu::get_vendor_string(){ int32_t CPUInfo[4]; char name[13];cpuid(CPUInfo, 0); memcpy(name + 0, &CPUInfo[1], 4);memcpy(name + 4, &CPUInfo[3], 4); memcpy(name + 8, &CPUInfo[2], 4); name[12] = '\0'; return name;}
 void cpu::detect_host(){
 
-#ifndef __ANDROID__
+#ifdef USE_INTRIN
 
     OS_x64 = detect_OS_x64();
     OS_AVX = detect_OS_AVX();
diff --git a/src/fbow.h b/src/fbow.h
index bccbc62..2ac8599 100644
--- a/src/fbow.h
+++ b/src/fbow.h
@@ -6,7 +6,7 @@
 #include <map>
 #include <memory>
 #include <bitset>
-#ifndef __ANDROID__
+#ifdef USE_INTRIN
 #include <immintrin.h>
 #endif
 #include "cpu.h"
@@ -235,7 +235,7 @@ private:
             return d;
         }
     };
-#ifdef __ANDROID__
+#ifndef USE_INTRIN
     //fake elements to allow compilation
     struct L2_avx_generic:public Lx<uint64_t,float,32>{inline float computeDist(uint64_t *ptr){return std::numeric_limits<float>::max();}};
     struct L2_se3_generic:public Lx<uint64_t,float,32>{inline float computeDist(uint64_t *ptr){return std::numeric_limits<float>::max();}};
